package core;
import java.io.UnsupportedEncodingException;
import java.net.*;

public class Tracker {

	
	// the GET request we send to the tracker will consist of the following fields
	public String generateTracketGetRequest() {
		String requestType = "GET /announce?";
		
//		info_hash: urlencoded 20-byte SHA1 hash of the value of the info key from the metainfo file		
		String info_hash = "";
		
//		peer_id: urlencoded 20-byte string used as a unique ID for the client,
//		generated by the client at startup. Get
		String peer_id = "";
		
//		port: The port number that the client is listening on. Get port from metainfo
		int port = 6969;
		
//		uploaded: The total number of bytes uploaded (since the client sent the 'started' 
//		event to the tracker) in base ten ASCII
		int uploaded = 0;
		
//		downloaded: The total number of bytes downloaded (since the client sent the 'started'
//		event to the tracker) in base ten ASCII.
		int downloaded = 0;
		
//		left: The number of bytes this client still has to download, encoded in base ten ASCII.
		int left = 0;
		
//		compact: Setting this to 1 indicates that the client accepts a compact response
		int compact = 0;
		
//		event: If specified, must be one of started, completed, stopped, (or empty which is the same
//		as not being specified). If not specified, then this request is one performed at regular intervals.
		String event = "";
		
		return requestType + "info_hash=" + info_hash + "&peer_id=" + peer_id + "&port=" + port
				+ "&uploaded=" + uploaded + "&downloaded=" + downloaded + "&left=" + left
				+ "&compact=" + compact + "&event=" + event + "\r\n";
		
	}
	
	
	
	

	
	
	// method returns urlencoded version of s
	public String urlEncode(String s) {
		try {
			return URLEncoder.encode(s, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return s;
		}
	}
	
	// method returns urldecoded version of s
	public String urlDecode(String s) {
		try {
			return URLDecoder.decode(s, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return s;
		}
	}
}
